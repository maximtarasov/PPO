// <auto-generated />
using CoffeePoint.Database;
using CoffeePoint.Domain.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CoffeePoint.Web.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20180424212008_Balances")]
    partial class Balances
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011");

            modelBuilder.Entity("CoffeePoint.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("AccountGuid");

                    b.Property<decimal>("Balance");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("TypeId");

                    b.HasKey("AccountGuid");

                    b.HasIndex("TypeId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("CoffeePoint.Domain.Entities.AccountType", b =>
                {
                    b.Property<int>("TypeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("TypeId");

                    b.ToTable("AccountTypes");
                });

            modelBuilder.Entity("CoffeePoint.Domain.Entities.CashierShift", b =>
                {
                    b.Property<Guid>("ShiftGuid");

                    b.Property<decimal>("Balance");

                    b.Property<Guid>("ClosedByUserGuid");

                    b.Property<DateTimeOffset?>("EndDate");

                    b.Property<Guid>("OpenedByUserGuid");

                    b.Property<DateTimeOffset>("StartDate");

                    b.HasKey("ShiftGuid");

                    b.HasIndex("ClosedByUserGuid");

                    b.HasIndex("OpenedByUserGuid");

                    b.ToTable("CashierShifts");
                });

            modelBuilder.Entity("CoffeePoint.Domain.Entities.Discount", b =>
                {
                    b.Property<Guid>("DiscountGuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<float>("Percetage");

                    b.HasKey("DiscountGuid");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("CoffeePoint.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("OrderGuid");

                    b.Property<decimal>("Balance");

                    b.Property<DateTimeOffset?>("ClosedDate");

                    b.Property<Guid?>("DiscountGuid");

                    b.Property<DateTimeOffset>("OpenDate");

                    b.Property<Guid>("ShiftGuid");

                    b.HasKey("OrderGuid");

                    b.HasIndex("DiscountGuid");

                    b.HasIndex("ShiftGuid");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CoffeePoint.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("ItemGuid");

                    b.Property<int>("Count");

                    b.Property<Guid>("OrderGuid");

                    b.Property<Guid>("ProductGuid");

                    b.HasKey("ItemGuid");

                    b.HasIndex("OrderGuid");

                    b.HasIndex("ProductGuid");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("CoffeePoint.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("ProductGuid");

                    b.Property<string>("Description")
                        .HasMaxLength(300);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<decimal>("Price");

                    b.HasKey("ProductGuid");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("CoffeePoint.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserGuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("UserGuid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CoffeePoint.Domain.Entities.Account", b =>
                {
                    b.HasOne("CoffeePoint.Domain.Entities.AccountType", "Type")
                        .WithMany("Accounts")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoffeePoint.Domain.Entities.CashierShift", b =>
                {
                    b.HasOne("CoffeePoint.Domain.Entities.User", "ClosedByUser")
                        .WithMany("ClosedShifts")
                        .HasForeignKey("ClosedByUserGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoffeePoint.Domain.Entities.User", "OpenedByUser")
                        .WithMany("OpenedShifts")
                        .HasForeignKey("OpenedByUserGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoffeePoint.Domain.Entities.Order", b =>
                {
                    b.HasOne("CoffeePoint.Domain.Entities.Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountGuid");

                    b.HasOne("CoffeePoint.Domain.Entities.CashierShift", "CashierShift")
                        .WithMany("Orders")
                        .HasForeignKey("ShiftGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoffeePoint.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("CoffeePoint.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoffeePoint.Domain.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
